- name: position_check
  A:
    unit: Dummy
    cell: !cell [0, 0]
  B:
    unit: Dummy
    cell: !cell [0, 1]
  actions_A: []
  actions_B: []
  checks:
    - cell: !cell [0, 0]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [0, 1]
      check: !prop cell.object
      result: !prop B

- A:
    unit: Dummy
    cell: !cell [0, 0]
  B:
    unit: Dummy
    cell: !cell [0, 1]
  actions_A:
    - action_name: Move
      args:
        path: !cell [1, 0]
  actions_B: []
  checks:
    - cell: !cell [1, 0]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [0, 1]
      check: !prop cell.object
      result: !prop B

- A:
    unit: Dummy
    cell: !cell [0, 0]
  B:
    unit: Dummy
    cell: !cell [0, 1]
  actions_A:
    - action_name: Attack
      args: {}
  actions_B: []
  checks:
    - cell: !cell [1, 0]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', !prop A.stats.damage]

# Move tests

# Move unit by 1 step
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: !cell [3, 3]
  actions_B: []
  checks:
    - cell: !cell [3, 3]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
      
# Move unit by via easy pathfinding 1 step
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: !cell [0, 1]
  actions_B: []
  checks:
    - cell: !cell [1, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
      
# Long Move
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: 
          - !cell [0, 2]
          - !cell [0, 1]
  actions_B: []
  checks:
    - cell: !cell [0, 1]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
      
# 2 consecutive Moves 
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: !cell [0, 2]
    - action_name: Move
      args:
        path: !cell [0, 1]
  actions_B: []
  checks:
    - cell: !cell [0, 1]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
      
# Move back and forth
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: !cell [3, 3]
    - action_name: Move
      args:
        path: !cell [2, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
   
# Move into obstacle
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
      
# Long Move with obstacle
- A:
    unit: Dummy
    cell: !cell [0, 1]
  B:
    unit: Dummy
    cell: !cell [2, 2]
  actions_A:
    - action_name: Move
      args:
        path: 
          - !cell [1, 2]
          - !cell [2, 2]
          - !cell [3, 3]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [1, 2]
      check: !prop cell.object
      result: !prop A
      
# Move in place
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: !cell [2, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
      
      
      
      
# Attack tests 

# Simple Attack
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Attack
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', !prop A.stats.damage]
      
# Simple Attack against armored target
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Fighter_sword
    cell: !cell [3, 2]
  actions_A:
    - action_name: Attack
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', !prop A.stats.damage, '+', !prop B.stats.armor]
      
# Attack out of range
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [0, 2]
  actions_A:
    - action_name: Attack
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [0, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [0, 2]
      check: !prop B.stats.health
      result: !prop B.stats.max__health
    - cell: !cell [2, 2]
      check: !prop A.stats.health
      result: !prop A.stats.max__health
      
#Kick tests

#Simple kick
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Kick
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', 7]
      
#Empowered kick
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: EmpoweredKick
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [4, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', 10]
      
#Empowered kick into wall
- A:
    unit: Dummy
    cell: !cell [3, 1]
  B:
    unit: Dummy
    cell: !cell [4, 0]
  actions_A:
    - action_name: EmpoweredKick
      args:
        target: !cell [4, 0]
  actions_B: []
  checks:
    - cell: !cell [3, 1]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [4, 0]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', 10]

## Endurance check
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: EmpoweredKick
      args:
        target: !cell [1, 3]
    - action_name: EmpoweredKick
      args:
        target: !cell [1, 3]
    - action_name: EmpoweredKick
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !prop B.stats.max__health


# Cleave tests

#Direct hit
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Cleave
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', !prop B.stats.damage]

# Adjacent hit 1
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Cleave
      args:
        target: !cell [3, 3]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', !prop B.stats.damage]

# Adjacent hit 2
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Cleave
      args:
        target: !cell [2, 1]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', !prop B.stats.damage]


#Empowered Cleave
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: EmpoweredCleave
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop B.stats.damage, '*', 1.4, ')']

# Lunge tests
#Into nothing
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Lunge
      args:
        target: !cell [2, 1]
  actions_B: []
  checks:
    - cell: !cell [2, 1]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !prop B.stats.max__health

#Into an enemy
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Lunge
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop A.stats.damage, '*', 0.6, ')']

#Step + hit
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [4, 1]
  actions_A:
    - action_name: Lunge
      args:
        target: !cell [4, 1]
  actions_B: []
  checks:
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [4, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [4, 1]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop A.stats.damage, '*', 0.6, ')']

#the tip
- A:
    unit: Dummy
    cell: !cell [1, 3]
  B:
    unit: Dummy
    cell: !cell [4, 1]
  actions_A:
    - action_name: Lunge
      args:
        target: !cell [4, 1]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [4, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [4, 1]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop A.stats.damage, '*', 0.6, ')']

# Emp Lunge

#point blank
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: EmpoweredLunge
      args:
        move: !cell [3, 2]
        hit: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop A.stats.damage, '*', 1.0, ')']
      
#whacky maneuver
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: EmpoweredLunge
      args:
        move: !cell [4, 3]
        hit: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [4, 3]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop A.stats.damage, '*', 1.0, ')']
      
#big distance
- A:
    unit: Dummy
    cell: !cell [0, 4]
  B:
    unit: Dummy
    cell: !cell [4, 1]
  actions_A:
    - action_name: EmpoweredLunge
      args:
        move: !cell [2, 2]
        hit: !cell [4, 1]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [4, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [4, 1]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop A.stats.damage, '*', 1.0, ')']
      
# Parry tests 

#normal parry
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Parry
      args: {}
  actions_B:
    - action_name: Attack
      args: {}
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop A.stats.health
      result: !prop A.stats.max__health
      
#parry break
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Parry
      args: {}
  actions_B:
    - action_name: EmpoweredCleave
      args: {}
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop A.stats.health
      result: !expr [!prop A.stats.max__health, '-', '(', !prop B.stats.damage, '*', 1.4, ')']
      

- name: empowered parry
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: EmpoweredParry
      args: {}
  actions_B:
    - action_name: Attack
      args: {}
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop A.stats.health, "==", !prop A.stats.max__health]
        - and
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-" , "(" , !prop A.stats.damage, "*", 0.5, ")", ")"]
      result: true

- name: on_kill_and_on_apply_event_tests
  A:
    unit: EvilDummy
    cell: !cell [0, 0]
  B:
    unit: Dummy
    cell: !cell [0, 1]
  actions_A:
    - action_name: Attack
      args: {}
  actions_B: []
  checks:
    - cell: !cell [0, 0]
      check: !prop A.stats.health
      result: 201

- name: regen_test
  A:
    unit: HealthyDummy
    cell: !cell [0, 0]
  B:
    unit: Dummy
    cell: !cell [0, 1]
  actions_A: []
  actions_B: []
  checks:
    - cell: !cell [0, 0]
      check: !prop A.stats.health
      result: 110
      
#LoadBullet tests

#Normal load
- A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBullet
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop A.stats.loaded
      result: "bullet"
      
#no bullets
- A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBullet
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop A.stats.loaded
      result: "nothing"
      
#Load then shoot
- A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBullet
      args: {}
    - action_name: ShootBullet
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 35, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.bullets, "==", "(", !prop A.stats.max__bullets, "-", 1, ")"]
      result: true
      
#Shoot wihout loading
- A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: ShootBullet
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", !prop B.stats.max__health]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.bullets, "==", !prop A.stats.max__bullets]
      result: true
      
#Shoot all bullets (unstable)
- A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBullet
      args: {}
    - action_name: ShootBullet
      args:
        target: !cell [3, 2]
    - action_name: LoadBullet
      args: {}
    - action_name: ShootBullet
      args:
        target: !cell [3, 2]
    - action_name: LoadBullet
      args: {}
    - action_name: ShootBullet
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 70, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.bullets, "==", "(", !prop A.stats.max__bullets, "-", 2, ")"]
      result: true

- name: ready action fail test
- A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBullet
      args: {}
    - action_name: ReadyBullet
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !prop B.stats.max__health