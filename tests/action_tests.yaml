- name: position_check
  A:
    unit: Dummy
    cell: !cell [0, 0]
  B:
    unit: Dummy
    cell: !cell [0, 1]
  actions_A: []
  actions_B: []
  checks:
    - cell: !cell [0, 0]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [0, 1]
      check: !prop cell.object
      result: !prop B

- name: Move test
  A:
    unit: Dummy
    cell: !cell [0, 0]
  B:
    unit: Dummy
    cell: !cell [0, 1]
  actions_A:
    - action_name: Move
      args:
        path: !cell [1, 0]
  actions_B: []
  checks:
    - cell: !cell [1, 0]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [0, 1]
      check: !prop cell.object
      result: !prop B

- name: Attack test
  A:
    unit: Dummy
    cell: !cell [0, 0]
  B:
    unit: Dummy
    cell: !cell [0, 1]
  actions_A:
    - action_name: Attack
      args: {}
  actions_B: []
  checks:
    - cell: !cell [1, 0]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', !prop A.stats.damage]

# Move tests

- name: Move unit by 1 step
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: !cell [3, 3]
  actions_B: []
  checks:
    - cell: !cell [3, 3]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
      
- name: Move unit via easy pathfinding 1 step
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: !cell [0, 1]
  actions_B: []
  checks:
    - cell: !cell [1, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
      
- name: Long Move
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: 
          - !cell [0, 2]
          - !cell [0, 1]
  actions_B: []
  checks:
    - cell: !cell [0, 1]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
      
- name: 2 consecutive Moves
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: !cell [0, 2]
    - action_name: Move
      args:
        path: !cell [0, 1]
  actions_B: []
  checks:
    - cell: !cell [0, 1]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
      
- name: Move back and forth
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: !cell [3, 3]
    - action_name: Move
      args:
        path: !cell [2, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
   
- name: Move into obstacle
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
      
- name: Long Move with obstacle
  A:
    unit: Dummy
    cell: !cell [0, 1]
  B:
    unit: Dummy
    cell: !cell [2, 2]
  actions_A:
    - action_name: Move
      args:
        path: 
          - !cell [1, 2]
          - !cell [2, 2]
          - !cell [3, 3]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [1, 2]
      check: !prop cell.object
      result: !prop A
      
- name: Move in place
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Move
      args:
        path: !cell [2, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
      
      
      
      
# Attack tests 

- name: Simple Attack
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Attack
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', !prop A.stats.damage]
      
- name: Simple Attack against armored target
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Fighter_sword
    cell: !cell [3, 2]
  actions_A:
    - action_name: Attack
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', !prop A.stats.damage, '+', !prop B.stats.armor]
      
- name: Attack out of range
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [0, 2]
  actions_A:
    - action_name: Attack
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [0, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [0, 2]
      check: !prop B.stats.health
      result: !prop B.stats.max__health
    - cell: !cell [2, 2]
      check: !prop A.stats.health
      result: !prop A.stats.max__health
      
#Kick tests

- name: Simple kick
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Kick
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', 7]
      
- name: Empowered kick
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: EmpoweredKick
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [4, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', 10]
      
- name: Empowered kick into wall
  A:
    unit: Dummy
    cell: !cell [3, 1]
  B:
    unit: Dummy
    cell: !cell [4, 0]
  actions_A:
    - action_name: EmpoweredKick
      args:
        target: !cell [4, 0]
  actions_B: []
  checks:
    - cell: !cell [3, 1]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [4, 0]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', 10]

- name: kick endurance check
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: EmpoweredKick
      args:
        target: !cell [1, 3]
    - action_name: EmpoweredKick
      args:
        target: !cell [1, 3]
    - action_name: EmpoweredKick
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !prop B.stats.max__health


# Cleave tests

- name: cleave direct hit
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Cleave
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', !prop B.stats.damage]

- name: cleave adjacent hit 1
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Cleave
      args:
        target: !cell [3, 3]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', !prop B.stats.damage]

- name: cleave adjacent hit 2
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Cleave
      args:
        target: !cell [2, 1]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', !prop B.stats.damage]


- name: Empowered Cleave
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: EmpoweredCleave
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop B.stats.damage, '*', 1.4, ')']

# Lunge tests
- name: lunge into nothing
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Lunge
      args:
        target: !cell [2, 1]
  actions_B: []
  checks:
    - cell: !cell [2, 1]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !prop B.stats.max__health

- name: lunge into an enemy
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Lunge
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop A.stats.damage, '*', 0.6, ')']

- name: Step + hit
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [4, 1]
  actions_A:
    - action_name: Lunge
      args:
        target: !cell [4, 1]
  actions_B: []
  checks:
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [4, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [4, 1]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop A.stats.damage, '*', 0.6, ')']

- name: hit with the tip
  A:
    unit: Dummy
    cell: !cell [1, 3]
  B:
    unit: Dummy
    cell: !cell [4, 1]
  actions_A:
    - action_name: Lunge
      args:
        target: !cell [4, 1]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [4, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [4, 1]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop A.stats.damage, '*', 0.6, ')']

# Emp Lunge

- name: point blank emp lunge
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: EmpoweredLunge
      args:
        move: !cell [3, 2]
        hit: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop A.stats.damage, '*', 1.0, ')']
      
- name: whacky lunge
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: EmpoweredLunge
      args:
        move: !cell [4, 3]
        hit: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [4, 3]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop A.stats.damage, '*', 1.0, ')']
      
- name: big distance lunge
  A:
    unit: Dummy
    cell: !cell [0, 4]
  B:
    unit: Dummy
    cell: !cell [4, 1]
  actions_A:
    - action_name: EmpoweredLunge
      args:
        move: !cell [2, 2]
        hit: !cell [4, 1]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [4, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [4, 1]
      check: !prop B.stats.health
      result: !expr [!prop B.stats.max__health, '-', '(', !prop A.stats.damage, '*', 1.0, ')']
      
# Parry tests 

- name: normal parry
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Parry
      args: {}
  actions_B:
    - action_name: Attack
      args: {}
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop A.stats.health
      result: !prop A.stats.max__health
      
- name: parry break
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Parry
      args: {}
  actions_B:
    - action_name: EmpoweredCleave
      args: {}
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop A.stats.health
      result: !expr [!prop A.stats.max__health, '-', '(', !prop B.stats.damage, '*', 1.4, ')']


- name: empowered parry
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: EmpoweredParry
      args: {}
  actions_B:
    - action_name: Attack
      args: {}
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop A.stats.health, "==", !prop A.stats.max__health]
        - and
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-" , "(" , !prop A.stats.damage, "*", 0.5, ")", ")"]
      result: true

- name: on_kill_and_on_apply_event_tests
  A:
    unit: EvilDummy
    cell: !cell [0, 0]
  B:
    unit: Dummy
    cell: !cell [0, 1]
  actions_A:
    - action_name: Attack
      args: {}
  actions_B: []
  checks:
    - cell: !cell [0, 0]
      check: !prop A.stats.health
      result: 201

- name: check_global
  A:
    unit: Dummy
    cell: !cell [0, 0]
  B:
    unit: Dummy
    cell: !cell [2, 2]
  actions_A: []
  actions_B: []
  checks:
    - cell: !cell [0, 0]
      check: !expr [!prop A, 'in', !glob arena]
      result: true
    - cell: !cell [2, 2]
      check: !expr [!prop B, 'in', !glob arena]
      result: true

- name: regen_test
  A:
    unit: HealthyDummy
    cell: !cell [0, 0]
  B:
    unit: Dummy
    cell: !cell [0, 1]
  actions_A: []
  actions_B: []
  checks:
    - cell: !cell [0, 0]
      check: !prop A.stats.health
      result: 110
      
#LoadBullet tests

- name: Normal load
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBullet
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop A.stats.loaded
      result: "bullet"
      
- name: no bullets
  A:
    unit: Dummy
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBullet
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop A.stats.loaded
      result: "nothing"
      
- name: Load then shoot
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBullet
      args: {}
    - action_name: Shoot
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 35, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.bullets, "==", "(", !prop A.stats.max__bullets, "-", 1, ")"]
      result: true
      
- name: Shoot wihout loading
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Shoot
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", !prop B.stats.max__health]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.bullets, "==", !prop A.stats.max__bullets]
      result: true
      
- name: Shoot all bullets (unstable)
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBullet
      args: {}
    - action_name: Shoot
      args:
        target: !cell [3, 2]
    - action_name: LoadBullet
      args: {}
    - action_name: Shoot
      args:
        target: !cell [3, 2]
    - action_name: LoadBullet
      args: {}
    - action_name: Shoot
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 70, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.bullets, "==", "(", !prop A.stats.max__bullets, "-", 2, ")"]
      result: true

#Buckshot tests

- name: Normal load(buckshot)
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBuckshot
      args: {}
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !prop A.stats.loaded
      result: "buckshot"

- name: Load buckshot then shoot
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBuckshot
      args: {}
    - action_name: Shoot
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 50, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.buckshots, "==", "(", !prop A.stats.max__buckshots, "-", 1, ")"]
      result: true

- name: Shoot wihout loading(buckshot)
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Shoot
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", !prop B.stats.max__health]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.buckshots, "==", !prop A.stats.max__buckshots]
      result: true

- name: Shoot all buckshots (unstable)
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Fighter_rifle
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBuckshot
      args: {}
    - action_name: Shoot
      args:
        target: !cell [3, 2]
    - action_name: LoadBuckshot
      args: {}
    - action_name: Shoot
      args:
        target: !cell [3, 2]
    - action_name: LoadBuckshot
      args: {}
    - action_name: Shoot
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 100, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.buckshots, "==", "(", !prop A.stats.max__buckshots, "-", 2, ")"]
      result: true

- name: Load + shoot 1 cell away
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 1]
  actions_A:
    - action_name: LoadBuckshot
      args: {}
    - action_name: Shoot
      args:
        target: !cell [3, 1]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 1]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 40, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.buckshots, "==", "(", !prop A.stats.max__buckshots, "-", 1, ")"]
      result: true

- name: Load + shoot 2 cells away
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [4, 0]
  actions_A:
    - action_name: LoadBuckshot
      args: {}
    - action_name: Shoot
      args:
        target: !cell [4, 0]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [4, 0]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [4, 0]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 30, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.buckshots, "==", "(", !prop A.stats.max__buckshots, "-", 1, ")"]
      result: true

- name: Load + shoot 4 cells away
  A:
    unit: Fighter_rifle
    cell: !cell [0, 4]
  B:
    unit: Dummy
    cell: !cell [3, 1]
  actions_A:
    - action_name: LoadBuckshot
      args: {}
    - action_name: Shoot
      args:
        target: !cell [3, 1]
  actions_B: []
  checks:
    - cell: !cell [0, 4]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 1]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 10, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.buckshots, "==", "(", !prop A.stats.max__buckshots, "-", 1, ")"]
      result: true

- name: ready bullet test
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBullet
      args: {}
    - action_name: Ready
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 35, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.bullets, "==", "(", !prop A.stats.max__bullets, "-", 1, ")"]
      result: true

- name: ready buckshot test
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadBuckshot
      args: {}
    - action_name: Ready
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 50, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.buckshots, "==", "(", !prop A.stats.max__buckshots, "-", 1, ")"]
      result: true

- name: ready miss test
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [2, 3]
  actions_A:
    - action_name: LoadBullet
      args: {}
    - action_name: Ready
      args:
        target: !cell [2, 1]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [2, 3]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", !prop B.stats.max__health]
        - and
        - [!prop A.stats.loaded, "==", "bullet"]
        - and
        - [!prop A.stats.bullets, "==", !prop A.stats.max__bullets]
      result: true

- name: ready walk in test
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [2, 3]
  actions_A:
    - action_name: LoadBullet
      args: {}
    - action_name: Ready
      args:
        target: !cell [2, 1]
  actions_B:
    - action_name: Move
      args:
        path: !cell [3, 3]
    - action_name: Move
      args:
        path: !cell [3, 2]
    - action_name: Move
      args:
        path: !cell [2, 1]
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [2, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 35, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.bullets, "==", "(", !prop A.stats.max__bullets, "-", 1, ")"]
      result: true

- name: ready walk out test
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [2, 3]
  actions_A:
    - action_name: LoadBullet
      args: {}
    - action_name: Ready
      args:
        target: !cell [2, 3]
  actions_B:
    - action_name: Move
      args:
        path: !cell [3, 3]
    - action_name: Move
      args:
        path: !cell [3, 2]
    - action_name: Move
      args:
        path: !cell [2, 1]
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [2, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", !prop B.stats.max__health]
        - and
        - [!prop A.stats.loaded, "==", "bullet"]
        - and
        - [!prop A.stats.bullets, "==", !prop A.stats.max__bullets]
      result: true

- name: ready weird fuckery test
  A:
    unit: Fighter_rifle
    cell: !cell [2, 3]
  B:
    unit: Fighter_sword
    cell: !cell [2, 2]
  actions_A:
    - action_name: LoadBullet
      args: {}
    - action_name: Ready
      args:
        target: !cell [3, 4]
  actions_B:
    - action_name: EmpoweredKick
      args:
        target: !cell [2, 3]
  checks:
    - cell: !cell [2, 4]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 31, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.bullets, "==", "(", !prop A.stats.max__bullets, "-", 1, ")"]
        - and
        - [!prop A.stats.health, "==", "(", !prop A.stats.max__health, "-", 10, ")"]
      result: true

- name: Self Burn
  A:
    unit: Dummy
    cell: !cell [0, 0]
  B:
    unit: Dummy
    cell: !cell [2, 2]
  turns:
    - - actions_A:
          - action_name: SelfBurn
            args: {}
        actions_B: []
    - - actions_A: []
        actions_B: []
    - - actions_A: []
        actions_B:
          - action_name: SelfBurn
            args: {}
    - - actions_A: []
        actions_B: []
  checks:
    - cell: !cell [0, 0]
      check: !prop A.stats.health
      result: 94
    - cell: !cell [2, 2]
      check: !prop B.stats.health
      result: 97

- name: jacan stun overflow
  A:
    unit: Fighter_sword
    cell: !cell [2, 2]
  B:
    unit: Fighter_rifle
    cell: !cell [3, 1]
  turns:
    - - actions_A:
          - action_name: Attack
            args: {}
          - action_name: Attack
            args: {}
          - action_name: Attack
            args: {}
        actions_B:
          - action_name: LoadJacan
            args: {}
          - action_name: Shoot
            args:
              target: !cell [2, 2]
    - - actions_A: []
        actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 1]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 1]
      check: !prop A.stats.action_points
      result: 3

- name: Load jacan then shoot
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: LoadJacan
      args: {}
    - action_name: Shoot
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr
        - [!prop B.stats.health, "==", "(", !prop B.stats.max__health, "-", 30, ")"]
        - and
        - [!prop A.stats.loaded, "==", "nothing"]
        - and
        - [!prop A.stats.jacans, "==", "(", !prop A.stats.max__jacans, "-", 1, ")"]
        - and
        - [!prop B.stats.action_points, "==", "(", !prop B.stats.max__action_points, "-", 2, ")"]
      result: true

- name: throw grenade
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Grenade
      args:
        target: !cell [3, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr [!prop B.stats.max__health, "-", 30]
      result: !prop B.stats.health

- name: throw grenade collateral
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  actions_A:
    - action_name: Grenade
      args:
        target: !cell [2, 2]
  actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr [!prop B.stats.max__health, "-", 10]
      result: !prop B.stats.health

- name: throw fire grenade
  A:
    unit: Fighter_rifle
    cell: !cell [2, 2]
  B:
    unit: Dummy
    cell: !cell [3, 2]
  turns:
    - - actions_A:
          - action_name: FireGrenade
            args:
              target: !cell [3, 2]
        actions_B: []
    - - actions_A: []
        actions_B: []
  checks:
    - cell: !cell [2, 2]
      check: !prop cell.object
      result: !prop A
    - cell: !cell [3, 2]
      check: !prop cell.object
      result: !prop B
    - cell: !cell [3, 2]
      check: !expr [!prop B.stats.max__health, "-", 20]
      result: !prop B.stats.health